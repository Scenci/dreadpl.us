[{"C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\index.js":"1","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\App.js":"2","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\reportWebVitals.js":"3","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\teamMembers.js":"4","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\useDocumentTitle.js":"5","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\Navbar.jsx":"6","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\Member.jsx":"7","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\MythicPlusCalculator.jsx":"8","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\DungeonBreakdown.jsx":"9","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\MemberDetails.jsx":"10","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\About.jsx":"11","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\AffixBanner.jsx":"12","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\Footer.jsx":"13"},{"size":535,"mtime":1680384644447,"results":"14","hashOfConfig":"15"},{"size":5384,"mtime":1680458175968,"results":"16","hashOfConfig":"15"},{"size":375,"mtime":1679892191326,"results":"17","hashOfConfig":"15"},{"size":413,"mtime":1680396470745,"results":"18","hashOfConfig":"15"},{"size":295,"mtime":1679892191327,"results":"19","hashOfConfig":"15"},{"size":1073,"mtime":1680404112593,"results":"20","hashOfConfig":"15"},{"size":2372,"mtime":1680397156058,"results":"21","hashOfConfig":"15"},{"size":6969,"mtime":1680458056585,"results":"22","hashOfConfig":"15"},{"size":4908,"mtime":1680405881569,"results":"23","hashOfConfig":"15"},{"size":5341,"mtime":1680384644442,"results":"24","hashOfConfig":"15"},{"size":336,"mtime":1680405873239,"results":"25","hashOfConfig":"15"},{"size":1441,"mtime":1680384644436,"results":"26","hashOfConfig":"15"},{"size":321,"mtime":1680404062652,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"16bvbjt",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"31"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"31"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"31"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"31"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\index.js",[],[],[],"C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\App.js",[],[],"C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\reportWebVitals.js",[],[],"C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\teamMembers.js",[],[],"C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\useDocumentTitle.js",[],[],"C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\Navbar.jsx",["72"],[],"import React, { useState } from 'react';\r\nimport { Link } from 'react-scroll';\r\n\r\nimport './Navbar.css';\r\n\r\nconst Navbar = (props) => {\r\n\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div className=\"nav-logo\">Dread+</div>\r\n      \r\n      <div className=\"nav-banner-container\">\r\n        <div className=\"nav-banner\">\r\n          <h1>Dragonflight: Season 1</h1>\r\n        </div>\r\n      </div>\r\n    \r\n      <ul className=\"nav-links\">\r\n        <li className=\"nav-item-mpc\">\r\n          <Link\r\n            activeClass=\"active\"\r\n            to=\"mythic-plus-calculator\"\r\n            spy={true}\r\n            smooth={true}\r\n            offset={-70}\r\n            duration={500}\r\n            >Mythic Plus Calculator\r\n          </Link>\r\n        </li>\r\n        <li className=\"nav-item-about\">\r\n        <Link\r\n            activeClass=\"active\"\r\n            to=\"about\"\r\n            spy={true}\r\n            smooth={true}\r\n            offset={-70}\r\n            duration={500}\r\n            >About\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\Member.jsx",[],[],"C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\MythicPlusCalculator.jsx",[],[],"C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\DungeonBreakdown.jsx",["73"],[],"import React, { useState, useEffect } from 'react';\r\nimport './DungeonBreakdown.css';\r\n\r\nconst DungeonBreakdown = ({dungeonData, setKeyLevels}) => {\r\n\r\n    const [highlightedDungeon, setHighlightedDungeon] = useState(null);\r\n    const [highlightedColumnType, setHighlightedColumnType] = useState(null);\r\n\r\n    const dungeons = [\r\n      \"SBG\",\r\n      \"COS\",\r\n      \"TJS\",\r\n      \"HOV\",\r\n      \"AA\",\r\n      \"AV\",\r\n      \"NO\",\r\n      \"RLP\",\r\n    ];\r\n\r\n\r\n    const handleClick = (dungeonName, columnType) => {\r\n      setHighlightedDungeon(dungeonName);\r\n      setHighlightedColumnType(columnType);\r\n    };\r\n\r\n\r\n    const handleLoadData = (data) => {\r\n      console.log(\"load data: \", data);\r\n      const tyrannicalBestRuns = filterDungeonsByType(data.mythic_plus_best_runs, 'Tyrannical');\r\n      const fortifiedBestRuns = filterDungeonsByType(data.mythic_plus_best_runs, 'Fortified');\r\n      const tyrannicalAlternateRuns = filterDungeonsByType(data.mythic_plus_alternate_runs, 'Tyrannical');\r\n      const fortifiedAlternateRuns = filterDungeonsByType(data.mythic_plus_alternate_runs, 'Fortified');\r\n      \r\n      const tyrannicalRuns = tyrannicalBestRuns.concat(tyrannicalAlternateRuns);\r\n      const fortifiedRuns = fortifiedBestRuns.concat(fortifiedAlternateRuns);\r\n    \r\n      const newKeyLevels = dungeons.reduce((acc, dungeon) => {\r\n        const tyrannicalRun = tyrannicalRuns.find(run => run.short_name === dungeon);\r\n        const fortifiedRun = fortifiedRuns.find(run => run.short_name === dungeon);\r\n        acc[dungeon] = [\r\n          tyrannicalRun ? tyrannicalRun.mythic_level : '',\r\n          fortifiedRun ? fortifiedRun.mythic_level : ''\r\n        ];\r\n        return acc;\r\n      }, {});\r\n    \r\n      setKeyLevels(newKeyLevels);\r\n    };\r\n\r\n    function filterDungeonsByType(dungeonRuns, type) {\r\n      return dungeonRuns\r\n        .filter((run) => run.affixes.some((affix) => affix.name === type))\r\n        .map((run) => ({ ...run, columnType: type }));\r\n    };\r\n\r\n      return (\r\n        <div className=\"dungeon-breakdown-container\">\r\n          <h2 className=\"dungeon-breakdown-title\">Dungeon Breakdown</h2>\r\n          <div className=\"dungeon-breakdown-grid\">\r\n            {dungeonData.map((data, index) => {\r\n               const allRuns = data.mythic_plus_best_runs.concat(data.mythic_plus_alternate_runs);\r\n               const tyrannicalRuns = filterDungeonsByType(allRuns, 'Tyrannical');\r\n               const fortifiedRuns = filterDungeonsByType(allRuns, 'Fortified');\r\n               //console.log(\"data DB Breakdown: \",data);\r\n      \r\n              return (\r\n                <div key={index} className=\"member-dungeons\">\r\n                  <div className=\"member-name\">{data.character.name}</div>\r\n                  <div className=\"run-types\">\r\n                    <div className=\"tyrannical-runs\">\r\n                      <h3>Tyrannical</h3>\r\n                      <ul>\r\n                        {tyrannicalRuns.map((run, i) => (\r\n                          <div key={i} className={`dungeon-info ${\r\n                            run.dungeon === highlightedDungeon &&\r\n                            run.columnType === highlightedColumnType\r\n                              ? 'highlight'\r\n                              : ''\r\n                          }`}\r\n                          onClick={() => handleClick(run.dungeon, run.columnType)}>\r\n                          <span className=\"tdungeon-name\">{run.short_name}</span>\r\n                          <span className=\"tdungeon-level\">+{run.mythic_level}</span>\r\n                          \r\n                          </div>\r\n                        ))}\r\n                      </ul>\r\n                    </div>\r\n                    <div className=\"fortified-runs\">\r\n                      <h3>Fortified</h3>\r\n                      <ul>\r\n                        {fortifiedRuns.map((run, i) => (\r\n                          <div key={i} className={`dungeon-info ${\r\n                            run.dungeon === highlightedDungeon &&\r\n                            run.columnType === highlightedColumnType\r\n                              ? 'highlight'\r\n                              : ''\r\n                          }`}\r\n                          onClick={() => handleClick(run.dungeon, run.columnType)}>\r\n                          <span className=\"fdungeon-name\">{run.short_name}</span>\r\n                          <span className=\"fdungeon-level\">+{run.mythic_level}</span>\r\n                          </div>\r\n                        ))}\r\n                      </ul>\r\n                    </div>\r\n                  \r\n                  </div>\r\n                  <div className=\"button-container-load\">\r\n                    <button onClick={() => handleLoadData(data)}>Load Calculator</button>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n};\r\n\r\nexport default DungeonBreakdown;\r\n","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\MemberDetails.jsx",["74"],[],"import React, { useEffect, useState } from 'react';\r\nimport './MemberDetails.css';\r\n\r\n//Calculator Starts Here\r\nconst calculateMPS = (keyLevel1, keyLevel2) => {\r\n  if (isNaN(keyLevel1) || isNaN(keyLevel2)) {\r\n    return \"\";\r\n  }\r\n  if (isNaN(keyLevel1) || isNaN(keyLevel2)) {\r\n    return \"\";\r\n  }\r\n\r\n  if(keyLevel1 === keyLevel2){\r\n    //console.log(\"key levels are the same now\");\r\n  }\r\n\r\n  const UP = 5 * Math.min(0.05 / 0.4, 1);\r\n  const higherKey = Math.max(keyLevel1, keyLevel2);\r\n  const lowerKey = Math.min(keyLevel1, keyLevel2);\r\n\r\n  const bestKey = ((100 + (higherKey - 10) * 7) + UP) * 1.5;\r\n  //console.log(\"Higher Key\", higherKey,\"-> \", bestKey);\r\n\r\n  const alternateKey = ((100 + (lowerKey - 10) * 7) + UP) * 0.5;\r\n  //console.log(\"Lower Key\", lowerKey,\"->\",alternateKey);\r\n  \r\n  //console.log(\"Combined Score= \",bestKey + alternateKey);\r\n\r\n  return (bestKey + alternateKey).toFixed(2);\r\n};\r\n\r\n\r\n//findLowest...\r\nconst findLowestAlternateHighestBest = (dungeonData, character) => {\r\n\r\n  if (!character || !character.name || !character.realm) {\r\n    console.log(\"findLowestAlternateHighBest character is null or missing required props\");\r\n    return null;\r\n  }\r\n  const characterData = dungeonData.find(data => data.character && data.character.name === character.name && data.character.realm === character.realm);\r\n\r\n  if (!characterData) {\r\n    return { lowestAlternate: null, highestBest: null, newScore: null };\r\n  }\r\n\r\n  const lowestAlternate = characterData.mythic_plus_alternate_runs.reduce((min, run) => run.score < min.score ? run : min);\r\n  const highestBest = characterData.mythic_plus_best_runs.reduce((max, run) => run.score > max.score ? run : max);\r\n\r\n  const newScore = calculateMPS(highestBest.level, lowestAlternate.level);\r\n  //console.log(\"Lowest Alternate: \", { lowestAlternate });\r\n  //console.log(\"Highest Best: \", { highestBest });\r\n  //console.log(\"newScore: \", { newScore })\r\n  return { lowestAlternate, highestBest, newScore };\r\n};\r\n\r\n\r\n//This returns \"highestBestSameDungeon\" which is the highest score you have for the same dungeon as your LOWEST KEY LEVEL.\r\nconst findHighestKeyForDungeon = (dungeonData, character, dungeon) => {\r\n  if (!character || !character.name || !character.realm) {\r\n    console.log(\"findHighestKeyForDungeon character is null or missing required props\");\r\n    return null;\r\n  }\r\n\r\n  const characterData = dungeonData.find(\r\n    (data) =>\r\n      data.character &&\r\n      data.character.name === character.name &&\r\n      data.character.realm === character.realm\r\n  );\r\n\r\n  if (!characterData) {\r\n    return null;\r\n  }\r\n\r\n  const highestBestSameDungeon = characterData.mythic_plus_best_runs.find(\r\n    (run) => run.short_name === dungeon\r\n  );\r\n  return highestBestSameDungeon;\r\n};\r\n\r\n\r\n//MemberDetail component starts here!!\r\nconst MemberDetails = ({ dungeonData, character }) => {\r\n  const { lowestAlternate, highestBest, newScore } = findLowestAlternateHighestBest(\r\n    dungeonData,\r\n    character\r\n  );\r\n  const [isRendered, setIsRendered] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsRendered(true);\r\n  }, [character]);\r\n\r\n  const highestBestSameDungeon = findHighestKeyForDungeon(\r\n    dungeonData,\r\n    character,\r\n    lowestAlternate.short_name\r\n  );\r\n\r\n  //Calculate Score Table Here\r\n  const calculateScoreTable = (lowestAlternate, highestBestSameDungeon, highestBest) => {\r\n\r\n    const tableRowSize = highestBest.mythic_level - lowestAlternate.mythic_level; \r\n    const scoreTable = [];\r\n    \r\n\r\n    for (let i = 1; i <= tableRowSize; i++) {\r\n      const newLowestAlternateLevel = lowestAlternate.mythic_level + i;\r\n      const newScore = calculateMPS(highestBestSameDungeon.mythic_level, newLowestAlternateLevel);\r\n      \r\n      const differenceInScore = (newScore - ((lowestAlternate.score*0.5) + (highestBestSameDungeon.score*1.5))).toFixed(2);\r\n      scoreTable.push({ increment: i, newLowestAlternateLevel, differenceInScore});\r\n\r\n    }\r\n\r\n\r\n    return scoreTable;\r\n  };\r\n\r\n\r\n  \r\n\r\n  const scoreTable = calculateScoreTable(lowestAlternate, highestBestSameDungeon, highestBest);\r\n  // I need to add the total \"Rating\" value for both highestBest Key-of-same-dungeon and lowestAlternate Key-of-same-dungeon\r\n  //const highestBest + alternateOfHighestBest\r\n  //const lowestAlternate + highestBestOfLowestAlternate\r\n\r\n  return (\r\n    <div className={`member-details ${isRendered ? 'slide-down' : ''}`}>\r\n      <h2>{character.name}</h2>\r\n      {highestBest && (\r\n        <p className=\"best-key\">Best Key: {highestBest.short_name}   +{highestBest.mythic_level}</p>\r\n      )}\r\n\r\n      {lowestAlternate && (\r\n        <p className=\"lowest-key\">Lowest Key: {lowestAlternate.short_name} +{lowestAlternate.mythic_level}</p>\r\n      )}\r\n      \r\n      \r\n        <p>If your lowest key was at the same level as your best key</p>\r\n      \r\n\r\n    {/* Score table rendering */}\r\n    <div className=\"score-table\">\r\n  <h3>Lowest Key Improvements</h3>\r\n  <div className=\"score-table-header\">\r\n    <span>Dungeon</span>\r\n    <span>Score Improvement</span>\r\n  </div>\r\n  {scoreTable.map((row, index) => (\r\n    <div key={index} className=\"score-table-row\">\r\n      <span>\r\n        {lowestAlternate.short_name} +{row.newLowestAlternateLevel}\r\n      </span>\r\n      <span>+{row.differenceInScore} points</span>\r\n    </div>\r\n  ))}\r\n</div>\r\n  </div>\r\n);\r\n};\r\n\r\nexport default MemberDetails;","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\About.jsx",[],[],"C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\AffixBanner.jsx",["75","76","77"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './AffixBanner.css';\r\n\r\n\r\nconst affixColorMapping = {\r\n    //Alternating by Week\r\n    'Fortified': '#00FFCE',\r\n    'Tyrannical': '#00FFCE',\r\n\r\n    //Easy\r\n    'Volcanic': '#3dff00',\r\n    'Storming': '#3dff00',\r\n\r\n    //Medium\r\n    'Explosive': '#Ffa800',\r\n    'Spiteful': '#Ffa800',\r\n    'Bolstering': '#Ffa800',\r\n    'Grievous': '#Ffa800',\r\n    'Bursting': '#Ffa800',\r\n\r\n    //Hard\r\n    'Raging': '##FF0037',\r\n    'Quaking': '#FF0037',\r\n    'Sanguine': '#FF0037',\r\n\r\n    //Seasonal\r\n    'Thundering':'#3399dd',\r\n\r\n    '': 'white'\r\n  };\r\n\r\n\r\nconst parseAffixes = (affixesString) => {\r\n    return affixesString.split(`, `).map(affix => affix.trim());\r\n};\r\n\r\n\r\n//component starts here\r\nconst AffixBanner = ({ affixes }) => {\r\n    const affixNames = parseAffixes(affixes);\r\n\r\n    return(\r\n            <div className=\"affix-header\" style={{ backgroundColor: '#282a36' }}> \r\n                {affixNames.reduce((acc, affix, index) => {\r\n\r\n            acc.push(\r\n                <span key={affix} style={{ color: affixColorMapping[affix], marginLeft: '6px', marginRight:'6px'}}>\r\n                {affix}\r\n                </span>\r\n            );\r\n\r\n            if (index !== affixNames.length - 1) {\r\n                acc.push(' ');\r\n            }\r\n            return acc;\r\n            }, [])}\r\n            </div>  \r\n\r\n    );\r\n\r\n};\r\n\r\nexport default AffixBanner;","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\Footer.jsx",[],[],{"ruleId":"78","severity":1,"message":"79","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":25},{"ruleId":"78","severity":1,"message":"82","line":1,"column":27,"nodeType":"80","messageId":"81","endLine":1,"endColumn":36},{"ruleId":"78","severity":1,"message":"83","line":84,"column":41,"nodeType":"80","messageId":"81","endLine":84,"endColumn":49},{"ruleId":"78","severity":1,"message":"79","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":25},{"ruleId":"78","severity":1,"message":"82","line":1,"column":27,"nodeType":"80","messageId":"81","endLine":1,"endColumn":36},{"ruleId":"78","severity":1,"message":"84","line":2,"column":8,"nodeType":"80","messageId":"81","endLine":2,"endColumn":13},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'newScore' is assigned a value but never used.","'axios' is defined but never used."]
[{"C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\index.js":"1","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\App.js":"2","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\reportWebVitals.js":"3","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\teamMembers.js":"4","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\useDocumentTitle.js":"5","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\Home.jsx":"6","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\Navbar.jsx":"7","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\Member.jsx":"8","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\MythicPlusCalculator.jsx":"9","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\DungeonBreakdown.jsx":"10","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\MemberDetails.jsx":"11","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\About.jsx":"12","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\AffixBanner.jsx":"13","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\Footer.jsx":"14"},{"size":535,"mtime":1680384644447,"results":"15","hashOfConfig":"16"},{"size":5341,"mtime":1680403237537,"results":"17","hashOfConfig":"16"},{"size":375,"mtime":1679892191326,"results":"18","hashOfConfig":"16"},{"size":413,"mtime":1680396470745,"results":"19","hashOfConfig":"16"},{"size":295,"mtime":1679892191327,"results":"20","hashOfConfig":"16"},{"size":214,"mtime":1679892191316,"results":"21","hashOfConfig":"16"},{"size":1073,"mtime":1680404112593,"results":"22","hashOfConfig":"16"},{"size":2372,"mtime":1680397156058,"results":"23","hashOfConfig":"16"},{"size":6965,"mtime":1680408217108,"results":"24","hashOfConfig":"16"},{"size":4908,"mtime":1680405881569,"results":"25","hashOfConfig":"16"},{"size":5341,"mtime":1680384644442,"results":"26","hashOfConfig":"16"},{"size":336,"mtime":1680405873239,"results":"27","hashOfConfig":"16"},{"size":1441,"mtime":1680384644436,"results":"28","hashOfConfig":"16"},{"size":321,"mtime":1680404062652,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16bvbjt",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\index.js",[],[],"C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\App.js",["80","81"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './loadingScreen.css';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar';\r\nimport Home from './components/Home';\r\nimport Member from './components/Member';\r\nimport teamMembers from './teamMembers';\r\nimport MemberDetails from './components/MemberDetails';\r\nimport useDocumentTitle from './useDocumentTitle';\r\nimport DungeonBreakdown from './components/DungeonBreakdown';\r\nimport MythicPlusCalculator from './components/MythicPlusCalculator';\r\nimport About from './components/About';\r\nimport AffixBanner from './components/AffixBanner';\r\nimport Footer from './components/Footer';\r\n\r\nfunction App() {\r\n  const [characters, setCharacters] = useState([]);\r\n  const [selectedMember, setSelectedMember] = useState(null);\r\n  const [dungeonData, setDungeonData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [keyLevels, setKeyLevels] = useState(Array(16).fill(\"\"));\r\n  const [affixes, setAffixes] = useState([]);\r\n  const [dbdVisible, setDBDVisible] = useState(false);\r\n\r\n\r\n  useDocumentTitle('Dread Mythic Plus');\r\n\r\n  //Fetching Dungeon Data per Member TODO COMBINE\r\n  useEffect(() => {\r\n    const fetchTeamMembers = async () => {\r\n      try {\r\n        const promises = teamMembers.map(async (defaultCharacter) => {\r\n          const result = await axios(\r\n            `https://raider.io/api/v1/characters/profile?region=us&realm=${defaultCharacter.server}&name=${defaultCharacter.name}&fields=mythic_plus_scores_by_season%3Acurrent%2Cmythic_plus_best_runs%3Aall%2Cmythic_plus_alternate_runs%3Aall`\r\n          );\r\n  \r\n          const combinedData = {\r\n            character: result.data,\r\n            mythic_plus_best_runs: result.data.mythic_plus_best_runs,\r\n            mythic_plus_alternate_runs: result.data.mythic_plus_alternate_runs,\r\n          };\r\n         \r\n          return combinedData;\r\n        });\r\n  \r\n        const results = await Promise.all(promises);\r\n        // Process the results and update the state here\r\n        setCharacters(results.map(result => result.character));\r\n        setDungeonData(results);\r\n  \r\n      } catch (error) {\r\n        console.error(\"Error fetching team members:\", error);\r\n      }\r\n    };\r\n  \r\n    const fetchAffixes = async () => {\r\n      try {\r\n        const response = await axios.get('https://raider.io/api/v1/mythic-plus/affixes?region=us&locale=en');\r\n        setAffixes(response.data.title);\r\n        //console.log(\"AFFIX RESPONSE: \",response);\r\n      } catch (error) {\r\n        console.error(\"Error fetching affixes:\", error);\r\n      }\r\n    };\r\n  \r\n\r\n    fetchTeamMembers();\r\n    fetchAffixes();\r\n    \r\n  \r\n    setTimeout(() => {\r\n      setIsLoading(false);\r\n    }, 2000);\r\n  }, []);\r\n\r\n\r\nconst handleMemberClick = (name, realm) => {\r\n  if (selectedMember && name === selectedMember.name && realm === selectedMember.realm) {\r\n    setSelectedMember(null);\r\n    setDBDVisible(false);\r\n  } else {\r\n    setSelectedMember({ name, realm });\r\n    setDBDVisible(true);\r\n  }\r\n  \r\n};\r\n\r\n  const handleCharacterSearch = (newCharacter) => {\r\n    setCharacters((prevCharacters) => [...prevCharacters, newCharacter]);\r\n  };\r\n\r\n  const handleRemoveMember = (idToRemove) => {\r\n    const prevCharacters = characters.filter((_, index) => index !== idToRemove);\r\n    const prevDungeonData = dungeonData.filter((_, index) => index !== idToRemove);\r\n  \r\n    setCharacters(prevCharacters);\r\n    setDungeonData(prevDungeonData);\r\n  };\r\n\r\n  //render\r\n  console.log('App.js dungeonData:', dungeonData);\r\n  return (\r\n    <div className=\"page-container\">\r\n      {isLoading ? (\r\n        <div className=\"loading-screen\">\r\n        <div className=\"lds-ring-container\">\r\n          <div className=\"lds-ring\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      ) : (\r\n        <>\r\n          <div className=\"App\">\r\n            <Navbar />\r\n            <div className=\"content\">\r\n              <div className=\"affix-container\">\r\n              <AffixBanner affixes={affixes} />\r\n              </div>\r\n              <div className=\"members-container\">\r\n              {characters.map((character, index) => (\r\n              <Member\r\n                key={`${character.name}-${character.realm}`}\r\n                id={index}\r\n                character={character}\r\n                onMemberClick={() => handleMemberClick(character.name, character.realm)}\r\n                onRemoveMember={handleRemoveMember}\r\n                hideRemoveBtn={dbdVisible}\r\n              />\r\n              ))}\r\n              </div>\r\n            \r\n              {selectedMember && dbdVisible && (\r\n                <MemberDetails\r\n                  dungeonData={dungeonData} \r\n                  character={selectedMember}\r\n                />\r\n              )}\r\n            </div>\r\n          </div>\r\n          <main>\r\n           <DungeonBreakdown dungeonData={dungeonData} setKeyLevels={setKeyLevels} />\r\n          <MythicPlusCalculator keyLevels={keyLevels} setKeyLevels={setKeyLevels} />\r\n               \r\n          </main>\r\n      <div className=\"about\">\r\n        <About ></About>\r\n      </div>\r\n      <div className=\"footer\">\r\n      <Footer />\r\n      </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\reportWebVitals.js",[],[],[],"C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\teamMembers.js",[],[],"C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\useDocumentTitle.js",[],[],"C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\Home.jsx",["82"],[],"import React from 'react';\r\nimport './Home.css';\r\nimport Member from '../components/Member';\r\n\r\nconst Home = () => {\r\n\r\n  return (\r\n    <div className=\"home\">\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\Navbar.jsx",["83"],[],"import React, { useState } from 'react';\r\nimport { Link } from 'react-scroll';\r\n\r\nimport './Navbar.css';\r\n\r\nconst Navbar = (props) => {\r\n\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div className=\"nav-logo\">Dread+</div>\r\n      \r\n      <div className=\"nav-banner-container\">\r\n        <div className=\"nav-banner\">\r\n          <h1>Dragonflight: Season 1</h1>\r\n        </div>\r\n      </div>\r\n    \r\n      <ul className=\"nav-links\">\r\n        <li className=\"nav-item-mpc\">\r\n          <Link\r\n            activeClass=\"active\"\r\n            to=\"mythic-plus-calculator\"\r\n            spy={true}\r\n            smooth={true}\r\n            offset={-70}\r\n            duration={500}\r\n            >Mythic Plus Calculator\r\n          </Link>\r\n        </li>\r\n        <li className=\"nav-item-about\">\r\n        <Link\r\n            activeClass=\"active\"\r\n            to=\"about\"\r\n            spy={true}\r\n            smooth={true}\r\n            offset={-70}\r\n            duration={500}\r\n            >About\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\Member.jsx",[],[],"C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\MythicPlusCalculator.jsx",["84","85","86","87"],[],"import React, { useState } from \"react\";\r\nimport \"./MythicPlusCalculator.css\";\r\n\r\nconst MythicPlusCalculator = ({keyLevels, setKeyLevels}) => {\r\n\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const dungeons = [\r\n    \"SBG\",\r\n    \"COS\",\r\n    \"TJS\",\r\n    \"HOV\",\r\n    \"AA\",\r\n    \"AV\",\r\n    \"NO\",\r\n    \"RLP\",\r\n  ];\r\n\r\n  const scoreColorMapping = {\r\n    '3450.0': '#ff8000',\r\n    '3290.0': '#f9753c',\r\n    '3170.0': '#f26b5b',\r\n    '3050.0': '#ea6078',\r\n    '2930.0': '#df5693',\r\n    '2810.0': '#d24cad',\r\n    '2690.0': '#c242c8',\r\n    '2570.0': '#ad38e3',\r\n    '2430.0': '#9544eb',\r\n    '2310.0': '#7c55e7',\r\n    '2190.0': '#5e62e3',\r\n    '2070.0': '#316cdf',\r\n    '1905.0': '#2d79d4',\r\n    '1785.0': '#4787c4',\r\n    '1665.0': '#5496b5',\r\n    '1545.0': '#5ca5a5',\r\n    '0.0': 'white',\r\n  };\r\n\r\n  const generateInitialUnderPercentageState = () => {\r\n    const initialState = {};\r\n  \r\n    dungeons.forEach((dungeon) => {\r\n      initialState[dungeon] = { 0: 0.05, 1: 0.05 };\r\n    });\r\n  \r\n    return initialState;\r\n  };\r\n\r\n  //Really important State Set here\r\n  const [underPercentageState, setUnderPercentageState] = useState(generateInitialUnderPercentageState());\r\n\r\n  const getScoreColor = (score) => {\r\n    const scoreRange = Object.keys(scoreColorMapping).find((range) => score > parseFloat(range));\r\n    return scoreRange ? scoreColorMapping[scoreRange] : 'white';\r\n  };\r\n\r\n  \r\n\r\n  const handleInputChange = (dungeon, index, value) => {\r\n    if (value > 35) {\r\n      setError(\"You wish\");\r\n      return;\r\n    } else if( value < 11 || value < 0) {\r\n      setError(\"Key Values must be greater than or equal to 11\");\r\n      return;\r\n    }else{\r\n        setError(\"\");\r\n    }\r\n    \r\n    const newKeyLevels = { ...keyLevels };\r\n    if (!newKeyLevels[dungeon]) {\r\n      newKeyLevels[dungeon] = ['', ''];\r\n    }\r\n    newKeyLevels[dungeon][index] = value;\r\n    setKeyLevels(newKeyLevels);\r\n  };\r\n\r\n  \r\n  const calculateTimeBonus = (underPercentage) => {\r\n    var timeBonus = 5;\r\n    if(underPercentage >= 0.4){\r\n      return timeBonus;\r\n    } else if(underPercentage >= 0.2){\r\n      timeBonus = 5 * underPercentage / 0.4;\r\n      return timeBonus;\r\n    } else {\r\n        timeBonus = 5 * Math.min(underPercentage / 0.4 , 1);\r\n        return timeBonus;\r\n      }\r\n    };\r\n    \r\n\r\n  const calculateMPS = (keyLevel1, keyLevel2, underPercentage1, underPercentage2) => {\r\n    if (isNaN(keyLevel1) || isNaN(keyLevel2)) {\r\n      return 0;\r\n    }\r\n    const TimeBonus1 = calculateTimeBonus(underPercentage1);\r\n    const TimeBonus2 = calculateTimeBonus(underPercentage2);\r\n    //const underPercentage = 0.05;\r\n    //const TimeBonus = calculateTimeBonus(underPercentage);\r\n    //const TimeBonus = 5 * (Math.min(0.05 / 0.4,1))\r\n    const higherKey = Math.max(keyLevel1, keyLevel2);\r\n    const lowerKey = Math.min(keyLevel1, keyLevel2);\r\n    const bestKey = ((100 + (higherKey - 10) * 7) + TimeBonus1) * 1.5;\r\n    const alternateKey = ((100 + (lowerKey - 10) * 7) + TimeBonus2) * 0.5;\r\n    return (bestKey + alternateKey).toFixed(2);\r\n  };\r\n  \r\n  const calculateTotalMPS = () => {\r\n    let total = 0;\r\n    for (const dungeon in keyLevels) {\r\n      total += parseFloat(calculateMPS(\r\n        keyLevels[dungeon] ? keyLevels[dungeon][0] : \"\",\r\n        keyLevels[dungeon] ? keyLevels[dungeon][1] : \"\",\r\n        underPercentageState[dungeon] ? underPercentageState[dungeon][0] : 0.05,\r\n        underPercentageState[dungeon] ? underPercentageState[dungeon][1] : 0.05\r\n      ));\r\n    }\r\n    return isNaN(total.toFixed(2)) ? \"Please Enter your Keys\" : total.toFixed(2);\r\n  };\r\n\r\n  const handleToggleClick = (dungeon, index) => {\r\n    setUnderPercentageState((prevState) => {\r\n      const currentValue = (prevState[dungeon] && prevState[dungeon][index]) || 0.05;\r\n      const nextValue = (currentValue === 0.05) ? 0.2 : ((currentValue === 0.2) ? 0.4 : 0.05);\r\n      return {\r\n        ...prevState,\r\n        [dungeon]: {\r\n          ...prevState[dungeon],\r\n          [index]: nextValue,\r\n        },\r\n      };\r\n    });\r\n  };\r\n\r\n  const getCustomText = (value) => {\r\n    if (value === 0.05) {\r\n      return '+1';\r\n    } else if (value === 0.2) {\r\n      return '+2';\r\n    } else {\r\n      return '+3';\r\n    }\r\n  };\r\n\r\n//RenderInputPairs Starts Here\r\nconst renderInputPairs = () => {\r\n  return (\r\n    <div className=\"dungeon-grid\">\r\n      <div className=\"header-row\">\r\n        <div className=\"dungeon-name\"></div>\r\n        <div className=\"tyrannical-column\">\r\n          <label>Tyrannical&#8239;&#8239;&thinsp;&thinsp;&thinsp;&thinsp;&#8239;&#8239;</label>\r\n        </div>\r\n        <div className=\"fortified-column\">\r\n          <label>Fortified</label>\r\n        </div>\r\n        <div className=\"sum-display\"></div>\r\n      </div>\r\n      {dungeons.map((dungeon, i) => (\r\n        <div key={i} className=\"dungeon-row\">\r\n          <div className=\"dungeon-name\">{dungeon}</div>\r\n          <div className=\"tyrannical-column\">\r\n        <button className=\"toggle-button\" onClick={() => handleToggleClick(dungeon, 0)}>\r\n        {getCustomText(underPercentageState[dungeon] && underPercentageState[dungeon][0] || 0.05)}\r\n        </button>\r\n        <input\r\n              id={`input-${i}`}\r\n              type=\"number\"\r\n              value={keyLevels[dungeon] ? keyLevels[dungeon][0] : ''}\r\n              onChange={(e) => handleInputChange(dungeon, 0, e.target.value)}\r\n              className=\"small-input\"\r\n            />\r\n          </div>\r\n          <div className=\"fortified-column\">\r\n        <button className=\"toggle-button\" onClick={() => handleToggleClick(dungeon, 1)}>\r\n        {getCustomText(underPercentageState[dungeon] && underPercentageState[dungeon][1] || 0.05)}\r\n        </button>\r\n            <input\r\n              id={`input-${i + 8}`}\r\n              type=\"number\"\r\n              value={keyLevels[dungeon] ? keyLevels[dungeon][1] : ''}\r\n              onChange={(e) => handleInputChange(dungeon, 1, e.target.value)}\r\n              className=\"small-input\"\r\n            />\r\n          </div>\r\n          <div className=\"sum-display\">\r\n        ={\" \"}\r\n        {calculateMPS(\r\n          keyLevels[dungeon] ? keyLevels[dungeon][0] : \"\",\r\n          keyLevels[dungeon] ? keyLevels[dungeon][1] : \"\",\r\n          underPercentageState[dungeon] ? parseFloat(underPercentageState[dungeon][0]) : 0.05,\r\n          underPercentageState[dungeon] ? parseFloat(underPercentageState[dungeon][1]) : 0.05\r\n        )}\r\n      </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\n  \r\n\r\n  \r\n  return (\r\n    <div className=\"mythic-plus-calculator\">\r\n      <h2>\r\n        <u>Mythic Plus Calculator</u>\r\n      </h2>\r\n      {renderInputPairs()}\r\n      {error && <p className=\"error-message\">{error}</p>}\r\n      <div>\r\n     \r\n        <h3 style={{ color: 'white' }}>Approximate Mythic Plus Score:\r\n        <span \r\n          style={{ color: isNaN(calculateTotalMPS()) ? '#ed5b45' : getScoreColor(calculateTotalMPS()) }}> {calculateTotalMPS()}</span></h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MythicPlusCalculator;\r\n","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\DungeonBreakdown.jsx",["88"],[],"import React, { useState, useEffect } from 'react';\r\nimport './DungeonBreakdown.css';\r\n\r\nconst DungeonBreakdown = ({dungeonData, setKeyLevels}) => {\r\n\r\n    const [highlightedDungeon, setHighlightedDungeon] = useState(null);\r\n    const [highlightedColumnType, setHighlightedColumnType] = useState(null);\r\n\r\n    const dungeons = [\r\n      \"SBG\",\r\n      \"COS\",\r\n      \"TJS\",\r\n      \"HOV\",\r\n      \"AA\",\r\n      \"AV\",\r\n      \"NO\",\r\n      \"RLP\",\r\n    ];\r\n\r\n\r\n    const handleClick = (dungeonName, columnType) => {\r\n      setHighlightedDungeon(dungeonName);\r\n      setHighlightedColumnType(columnType);\r\n    };\r\n\r\n\r\n    const handleLoadData = (data) => {\r\n      console.log(\"load data: \", data);\r\n      const tyrannicalBestRuns = filterDungeonsByType(data.mythic_plus_best_runs, 'Tyrannical');\r\n      const fortifiedBestRuns = filterDungeonsByType(data.mythic_plus_best_runs, 'Fortified');\r\n      const tyrannicalAlternateRuns = filterDungeonsByType(data.mythic_plus_alternate_runs, 'Tyrannical');\r\n      const fortifiedAlternateRuns = filterDungeonsByType(data.mythic_plus_alternate_runs, 'Fortified');\r\n      \r\n      const tyrannicalRuns = tyrannicalBestRuns.concat(tyrannicalAlternateRuns);\r\n      const fortifiedRuns = fortifiedBestRuns.concat(fortifiedAlternateRuns);\r\n    \r\n      const newKeyLevels = dungeons.reduce((acc, dungeon) => {\r\n        const tyrannicalRun = tyrannicalRuns.find(run => run.short_name === dungeon);\r\n        const fortifiedRun = fortifiedRuns.find(run => run.short_name === dungeon);\r\n        acc[dungeon] = [\r\n          tyrannicalRun ? tyrannicalRun.mythic_level : '',\r\n          fortifiedRun ? fortifiedRun.mythic_level : ''\r\n        ];\r\n        return acc;\r\n      }, {});\r\n    \r\n      setKeyLevels(newKeyLevels);\r\n    };\r\n\r\n    function filterDungeonsByType(dungeonRuns, type) {\r\n      return dungeonRuns\r\n        .filter((run) => run.affixes.some((affix) => affix.name === type))\r\n        .map((run) => ({ ...run, columnType: type }));\r\n    };\r\n\r\n      return (\r\n        <div className=\"dungeon-breakdown-container\">\r\n          <h2 className=\"dungeon-breakdown-title\">Dungeon Breakdown</h2>\r\n          <div className=\"dungeon-breakdown-grid\">\r\n            {dungeonData.map((data, index) => {\r\n               const allRuns = data.mythic_plus_best_runs.concat(data.mythic_plus_alternate_runs);\r\n               const tyrannicalRuns = filterDungeonsByType(allRuns, 'Tyrannical');\r\n               const fortifiedRuns = filterDungeonsByType(allRuns, 'Fortified');\r\n               //console.log(\"data DB Breakdown: \",data);\r\n      \r\n              return (\r\n                <div key={index} className=\"member-dungeons\">\r\n                  <div className=\"member-name\">{data.character.name}</div>\r\n                  <div className=\"run-types\">\r\n                    <div className=\"tyrannical-runs\">\r\n                      <h3>Tyrannical</h3>\r\n                      <ul>\r\n                        {tyrannicalRuns.map((run, i) => (\r\n                          <div key={i} className={`dungeon-info ${\r\n                            run.dungeon === highlightedDungeon &&\r\n                            run.columnType === highlightedColumnType\r\n                              ? 'highlight'\r\n                              : ''\r\n                          }`}\r\n                          onClick={() => handleClick(run.dungeon, run.columnType)}>\r\n                          <span className=\"tdungeon-name\">{run.short_name}</span>\r\n                          <span className=\"tdungeon-level\">+{run.mythic_level}</span>\r\n                          \r\n                          </div>\r\n                        ))}\r\n                      </ul>\r\n                    </div>\r\n                    <div className=\"fortified-runs\">\r\n                      <h3>Fortified</h3>\r\n                      <ul>\r\n                        {fortifiedRuns.map((run, i) => (\r\n                          <div key={i} className={`dungeon-info ${\r\n                            run.dungeon === highlightedDungeon &&\r\n                            run.columnType === highlightedColumnType\r\n                              ? 'highlight'\r\n                              : ''\r\n                          }`}\r\n                          onClick={() => handleClick(run.dungeon, run.columnType)}>\r\n                          <span className=\"fdungeon-name\">{run.short_name}</span>\r\n                          <span className=\"fdungeon-level\">+{run.mythic_level}</span>\r\n                          </div>\r\n                        ))}\r\n                      </ul>\r\n                    </div>\r\n                  \r\n                  </div>\r\n                  <div className=\"button-container-load\">\r\n                    <button onClick={() => handleLoadData(data)}>Load Calculator</button>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n};\r\n\r\nexport default DungeonBreakdown;\r\n","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\MemberDetails.jsx",["89"],[],"import React, { useEffect, useState } from 'react';\r\nimport './MemberDetails.css';\r\n\r\n//Calculator Starts Here\r\nconst calculateMPS = (keyLevel1, keyLevel2) => {\r\n  if (isNaN(keyLevel1) || isNaN(keyLevel2)) {\r\n    return \"\";\r\n  }\r\n  if (isNaN(keyLevel1) || isNaN(keyLevel2)) {\r\n    return \"\";\r\n  }\r\n\r\n  if(keyLevel1 === keyLevel2){\r\n    //console.log(\"key levels are the same now\");\r\n  }\r\n\r\n  const UP = 5 * Math.min(0.05 / 0.4, 1);\r\n  const higherKey = Math.max(keyLevel1, keyLevel2);\r\n  const lowerKey = Math.min(keyLevel1, keyLevel2);\r\n\r\n  const bestKey = ((100 + (higherKey - 10) * 7) + UP) * 1.5;\r\n  //console.log(\"Higher Key\", higherKey,\"-> \", bestKey);\r\n\r\n  const alternateKey = ((100 + (lowerKey - 10) * 7) + UP) * 0.5;\r\n  //console.log(\"Lower Key\", lowerKey,\"->\",alternateKey);\r\n  \r\n  //console.log(\"Combined Score= \",bestKey + alternateKey);\r\n\r\n  return (bestKey + alternateKey).toFixed(2);\r\n};\r\n\r\n\r\n//findLowest...\r\nconst findLowestAlternateHighestBest = (dungeonData, character) => {\r\n\r\n  if (!character || !character.name || !character.realm) {\r\n    console.log(\"findLowestAlternateHighBest character is null or missing required props\");\r\n    return null;\r\n  }\r\n  const characterData = dungeonData.find(data => data.character && data.character.name === character.name && data.character.realm === character.realm);\r\n\r\n  if (!characterData) {\r\n    return { lowestAlternate: null, highestBest: null, newScore: null };\r\n  }\r\n\r\n  const lowestAlternate = characterData.mythic_plus_alternate_runs.reduce((min, run) => run.score < min.score ? run : min);\r\n  const highestBest = characterData.mythic_plus_best_runs.reduce((max, run) => run.score > max.score ? run : max);\r\n\r\n  const newScore = calculateMPS(highestBest.level, lowestAlternate.level);\r\n  //console.log(\"Lowest Alternate: \", { lowestAlternate });\r\n  //console.log(\"Highest Best: \", { highestBest });\r\n  //console.log(\"newScore: \", { newScore })\r\n  return { lowestAlternate, highestBest, newScore };\r\n};\r\n\r\n\r\n//This returns \"highestBestSameDungeon\" which is the highest score you have for the same dungeon as your LOWEST KEY LEVEL.\r\nconst findHighestKeyForDungeon = (dungeonData, character, dungeon) => {\r\n  if (!character || !character.name || !character.realm) {\r\n    console.log(\"findHighestKeyForDungeon character is null or missing required props\");\r\n    return null;\r\n  }\r\n\r\n  const characterData = dungeonData.find(\r\n    (data) =>\r\n      data.character &&\r\n      data.character.name === character.name &&\r\n      data.character.realm === character.realm\r\n  );\r\n\r\n  if (!characterData) {\r\n    return null;\r\n  }\r\n\r\n  const highestBestSameDungeon = characterData.mythic_plus_best_runs.find(\r\n    (run) => run.short_name === dungeon\r\n  );\r\n  return highestBestSameDungeon;\r\n};\r\n\r\n\r\n//MemberDetail component starts here!!\r\nconst MemberDetails = ({ dungeonData, character }) => {\r\n  const { lowestAlternate, highestBest, newScore } = findLowestAlternateHighestBest(\r\n    dungeonData,\r\n    character\r\n  );\r\n  const [isRendered, setIsRendered] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsRendered(true);\r\n  }, [character]);\r\n\r\n  const highestBestSameDungeon = findHighestKeyForDungeon(\r\n    dungeonData,\r\n    character,\r\n    lowestAlternate.short_name\r\n  );\r\n\r\n  //Calculate Score Table Here\r\n  const calculateScoreTable = (lowestAlternate, highestBestSameDungeon, highestBest) => {\r\n\r\n    const tableRowSize = highestBest.mythic_level - lowestAlternate.mythic_level; \r\n    const scoreTable = [];\r\n    \r\n\r\n    for (let i = 1; i <= tableRowSize; i++) {\r\n      const newLowestAlternateLevel = lowestAlternate.mythic_level + i;\r\n      const newScore = calculateMPS(highestBestSameDungeon.mythic_level, newLowestAlternateLevel);\r\n      \r\n      const differenceInScore = (newScore - ((lowestAlternate.score*0.5) + (highestBestSameDungeon.score*1.5))).toFixed(2);\r\n      scoreTable.push({ increment: i, newLowestAlternateLevel, differenceInScore});\r\n\r\n    }\r\n\r\n\r\n    return scoreTable;\r\n  };\r\n\r\n\r\n  \r\n\r\n  const scoreTable = calculateScoreTable(lowestAlternate, highestBestSameDungeon, highestBest);\r\n  // I need to add the total \"Rating\" value for both highestBest Key-of-same-dungeon and lowestAlternate Key-of-same-dungeon\r\n  //const highestBest + alternateOfHighestBest\r\n  //const lowestAlternate + highestBestOfLowestAlternate\r\n\r\n  return (\r\n    <div className={`member-details ${isRendered ? 'slide-down' : ''}`}>\r\n      <h2>{character.name}</h2>\r\n      {highestBest && (\r\n        <p className=\"best-key\">Best Key: {highestBest.short_name}   +{highestBest.mythic_level}</p>\r\n      )}\r\n\r\n      {lowestAlternate && (\r\n        <p className=\"lowest-key\">Lowest Key: {lowestAlternate.short_name} +{lowestAlternate.mythic_level}</p>\r\n      )}\r\n      \r\n      \r\n        <p>If your lowest key was at the same level as your best key</p>\r\n      \r\n\r\n    {/* Score table rendering */}\r\n    <div className=\"score-table\">\r\n  <h3>Lowest Key Improvements</h3>\r\n  <div className=\"score-table-header\">\r\n    <span>Dungeon</span>\r\n    <span>Score Improvement</span>\r\n  </div>\r\n  {scoreTable.map((row, index) => (\r\n    <div key={index} className=\"score-table-row\">\r\n      <span>\r\n        {lowestAlternate.short_name} +{row.newLowestAlternateLevel}\r\n      </span>\r\n      <span>+{row.differenceInScore} points</span>\r\n    </div>\r\n  ))}\r\n</div>\r\n  </div>\r\n);\r\n};\r\n\r\nexport default MemberDetails;","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\About.jsx",[],[],"C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\AffixBanner.jsx",["90","91","92"],[],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './AffixBanner.css';\r\n\r\n\r\nconst affixColorMapping = {\r\n    //Alternating by Week\r\n    'Fortified': '#00FFCE',\r\n    'Tyrannical': '#00FFCE',\r\n\r\n    //Easy\r\n    'Volcanic': '#3dff00',\r\n    'Storming': '#3dff00',\r\n\r\n    //Medium\r\n    'Explosive': '#Ffa800',\r\n    'Spiteful': '#Ffa800',\r\n    'Bolstering': '#Ffa800',\r\n    'Grievous': '#Ffa800',\r\n    'Bursting': '#Ffa800',\r\n\r\n    //Hard\r\n    'Raging': '##FF0037',\r\n    'Quaking': '#FF0037',\r\n    'Sanguine': '#FF0037',\r\n\r\n    //Seasonal\r\n    'Thundering':'#3399dd',\r\n\r\n    '': 'white'\r\n  };\r\n\r\n\r\nconst parseAffixes = (affixesString) => {\r\n    return affixesString.split(`, `).map(affix => affix.trim());\r\n};\r\n\r\n\r\n//component starts here\r\nconst AffixBanner = ({ affixes }) => {\r\n    const affixNames = parseAffixes(affixes);\r\n\r\n    return(\r\n            <div className=\"affix-header\" style={{ backgroundColor: '#282a36' }}> \r\n                {affixNames.reduce((acc, affix, index) => {\r\n\r\n            acc.push(\r\n                <span key={affix} style={{ color: affixColorMapping[affix], marginLeft: '6px', marginRight:'6px'}}>\r\n                {affix}\r\n                </span>\r\n            );\r\n\r\n            if (index !== affixNames.length - 1) {\r\n                acc.push(' ');\r\n            }\r\n            return acc;\r\n            }, [])}\r\n            </div>  \r\n\r\n    );\r\n\r\n};\r\n\r\nexport default AffixBanner;","C:\\Users\\Steven\\Documents\\Projects\\mplus-1\\src\\components\\Footer.jsx",[],[],{"ruleId":"93","severity":1,"message":"94","line":6,"column":8,"nodeType":"95","messageId":"96","endLine":6,"endColumn":12},{"ruleId":"93","severity":1,"message":"97","line":89,"column":9,"nodeType":"95","messageId":"96","endLine":89,"endColumn":30},{"ruleId":"93","severity":1,"message":"98","line":3,"column":8,"nodeType":"95","messageId":"96","endLine":3,"endColumn":14},{"ruleId":"93","severity":1,"message":"99","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":25},{"ruleId":"100","severity":1,"message":"101","line":165,"column":54,"nodeType":"102","messageId":"103","endLine":165,"endColumn":56},{"ruleId":"100","severity":1,"message":"101","line":165,"column":90,"nodeType":"102","messageId":"103","endLine":165,"endColumn":92},{"ruleId":"100","severity":1,"message":"101","line":177,"column":54,"nodeType":"102","messageId":"103","endLine":177,"endColumn":56},{"ruleId":"100","severity":1,"message":"101","line":177,"column":90,"nodeType":"102","messageId":"103","endLine":177,"endColumn":92},{"ruleId":"93","severity":1,"message":"104","line":1,"column":27,"nodeType":"95","messageId":"96","endLine":1,"endColumn":36},{"ruleId":"93","severity":1,"message":"105","line":84,"column":41,"nodeType":"95","messageId":"96","endLine":84,"endColumn":49},{"ruleId":"93","severity":1,"message":"99","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":25},{"ruleId":"93","severity":1,"message":"104","line":1,"column":27,"nodeType":"95","messageId":"96","endLine":1,"endColumn":36},{"ruleId":"93","severity":1,"message":"106","line":2,"column":8,"nodeType":"95","messageId":"96","endLine":2,"endColumn":13},"no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","'handleCharacterSearch' is assigned a value but never used.","'Member' is defined but never used.","'useState' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'useEffect' is defined but never used.","'newScore' is assigned a value but never used.","'axios' is defined but never used."]